<!DOCTYPE html>
<html lang="en" dir="ltr">
  <head>
    <link rel="stylesheet" type="text/css" href="">
    <!-- <link rel="stylesheet" type="text/css" href="/stylesheets/texteditor.css"> -->
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
    <script src="/socket.io/socket.io.js"></script>
    <meta charset="utf-8">
    <title>Dashboard</title>
    <style>
      :root {
        --clr-grey: #333333;
        --clr-blue: #64aaff;
        --clr-red: #ff6464;
        --clr-white: #ffffff;
      }
      body {
        margin: 0;
        font-family: sans-serif;
        background-color: var(--clr-grey);
        color: var(--clr-white);
      }
      ::placeholder {
        color: var(--clr-white);
        opacity: .8;
      }
      .grid-container {
        display: grid;
        grid:
          'header header header header' auto
          '.      left   right  .'      auto
          'footer footer footer footer' auto /
          1fr minmax(300px, 300px) minmax(500px, 500px) 1fr;
      }
      @media (max-width: 900px) {
        .grid-container  {
          grid:
            'header header header header' auto
            '.      left   left   .'      auto
            '.      right  right  .'      auto
            'footer footer footer footer' auto /
            1fr minmax(250px, 250px) minmax(250px, 250px) 1fr;
        }
      }
      .header {
        grid-area: header;
        font-size: 1.5rem;
        margin-top: 0;
        display: flex;
        justify-content: space-between;
      }
      .header h1 {
        margin-top: 0;
      }
      .header-form {
        display: flex;
      }
      .header-form button {
        cursor: pointer;
        background: transparent;
        font-size: .9rem;
        font-weight: bold;
        color: var(--clr-white);
        border: 0;
        transition: color 300ms;
      }
      .header-form button:focus,
      .header-form button:hover {
        outline: none;
        color: var(--clr-red);
      }
      .lists {
        grid-area: left;
      }
      .list-container {
        font-size: .9rem;
        line-height: 1.8;
        padding-left: 1.1rem;
        width: 160px;
        word-wrap: break-word;
      }
      .list-name {
        cursor: pointer;
        transition: color 300ms;
      }
      .list-name:hover {
        color: var(--clr-blue);
      }
      .list-form input {
        background: transparent;
        font-size: .9rem;
        color: var(--clr-white);
        border: 0;
  			border-bottom: 1px solid var(--clr-white);
        transition: border-bottom 300ms;
  		}
      .list-form input:focus,
      .list-form input:hover {
        outline: none;
        border-bottom: 1px solid var(--clr-blue);
      }
      .selected-list {
        font-weight: bold;
      }
      .completed-list {
        text-decoration: line-through;
      }
  		.list-form button {
        cursor: pointer;
        background: transparent;
        font-size: .9rem;
        font-weight: bold;
        color: var(--clr-white);
        border: 0;
        transition: color 300ms;
  		}
      .list-form button:focus,
      .list-form button:hover {
        outline: none;
        color: var(--clr-blue);
      }
      .display-list {
        grid-area: right;
        /* background-color: ; */
      }
      .display-list-header {
        padding: 1.25rem 2rem 1.25rem 2rem;
        /* background-color: ; */
        display: flex;
      }
      .display-list-title {
        width: 67%;
        word-wrap: break-word;
        margin: 0 1.25rem 0 0;
      }
      .display-list-count {
        width: 33%;
        font-size: .9rem;
      }
      .task-container {
        padding: 1rem 2rem 1rem 2rem;
      }
      .task-row {
        display: flex;
        align-items: center;
        justify-content: space-between;
        height: 4rem;
        border-bottom: 1px solid;
        transition: border-bottom 300ms;
        pointer-events: none;
      }
      .task-row:hover, .task-row:focus-within  {
        border-bottom: 1px solid var(--clr-blue);
      }
      .task-name {
        display: flex;
        align-items: center;
        width: 100%;
      }
      .task-name input {
        cursor: pointer;
        margin: 0;
        height: 1rem;
        width: 1rem;
        outline: none;
      }
      .task-name label {
        cursor: pointer;
        padding-left: .4rem;
        padding-right: .4rem;
        width: 49%;
        word-wrap: break-word;
      }
      .task-row > .task-name input, .task-name label {
        pointer-events: auto;
      }
      .task-name input:focus {
        outline: 1px solid var(--clr-blue);
      }
      .task-name input:checked + label {
        text-decoration: line-through;
      }
      .task-row button {
        pointer-events: initial;
        cursor: pointer;
        background: transparent;
        font-size: .9rem;
        font-weight: bold;
        color: var(--clr-white);
        border: 0;
        transition: color 300ms;
      }
      .task-row button:focus,
      .task-row button:hover {
        outline: none;
        color: var(--clr-red);
      }
      .task-form {
        padding: 1rem 2rem 1rem 2rem;
      }
      .task-form input {
        background: transparent;
        font-size: 1rem;
        color: var(--clr-white);
        border: 0;
  			border-bottom: 1px solid var(--clr-white);
        transition: border-bottom 300ms;
  		}
      .task-form input:focus,
      .task-form input:hover {
        outline: none;
        border-bottom: 1px solid var(--clr-blue);
      }
      .task-form button {
        cursor: pointer;
        background: transparent;
        font-size: .9rem;
        font-weight: bold;
        color: var(--clr-white);
        border: 0;
        transition: color 300ms;
  		}
      .task-form button:focus,
      .task-form button:hover {
        outline: none;
        color: var(--clr-blue);
      }
      .reset-form p {
        margin-bottom: 0;
      }
      .reset-form td {
        display: flex;
        position: relative;
        padding: 0;
      }
      .reset-form input[type="checkbox"]{
        cursor: pointer;
        outline: none;
      }
      .reset-form label {
        cursor: pointer;
        padding-left: .1rem;
        transition: color 300ms;
      }
      .reset-form input[type="checkbox"]:focus {
        outline: 1px solid var(--clr-blue);
      }
      .reset-form input[type="checkbox"]:checked + label {
        font-weight: bold;
      }
      .reset-form label:hover,
      .reset-form input[type="checkbox"]:hover + label {
        color: var(--clr-blue)
      }
      .del-list-form {
        display: flex;
        justify-content: flex-end;
      }
      .del-list-form button {
        cursor: pointer;
        background: transparent;
        font-size: .9rem;
        font-weight: bold;
        color: var(--clr-white);
        border: 0;
        transition: color 300ms;
      }
      .del-list-form button:focus,
      .del-list-form button:hover {
        outline: none;
        color: var(--clr-red);
      }
      #template1{
        padding: 10px 10px;
        text-align: center;
        text-decoration: none;
        display: inline-block;
        font-size: 15px;
        background-color: yellow;
      }
      #template2{
        padding: 10px 10px;
        text-align: center;
        text-decoration: none;
        display: inline-block;
        font-size: 15px;
        background-color: purple;
      }
      #template3{
        padding: 10px 10px;
        text-align: center;
        text-decoration: none;
        display: inline-block;
        font-size: 15px;
      }
    </style>

    <style>
      .CHATBOX {padding: 3px; position: fixed; bottom: 0.5%; height: 25%; width: 100%; z-index: -1; border: 1px black; overflow-y: auto; }
      .CHATBOX input { border: 0; padding: 10px; width: 90%; margin-right: 0.5%;}
      #messages { list-style-type: none; margin: 0; padding: 0; }
      #messages li { padding: 5px 10px;}
      #messages li:nth-child(odd) { background:}/* alternate the bg color */
      .selectUser{ border-width: 1px; border-color: black; position: fixed; bottom: 10%; right: 10%; width: 5% }
      .inputBox{position: fixed; bottom: 5%; right: 10%; width: 10%; height: 3%;}
      .sendButton { width: 9%; border: none; padding: 10px; position: fixed; right: 0.5%; bottom: 4%;}

    </style>

  </head>

  <script>
    var userSessions = [];
    var your_name = "<%= username %>";
    var sessionID;
    var logged = false;
    const socket = io();

    $(function () {
      $('#socketChat').submit(function(e){

        e.preventDefault(); // prevents page reloading
        var specialPerson =document.getElementById("chatUsers");
        var selected = specialPerson.options[specialPerson.selectedIndex];
        if (selected.text == "" && $('#m').val() != "" ) {
          socket.emit('type chat message', your_name, $('#m').val());
        }
        else{
          if($('#m').val() != "")
            socket.emit('specified user', selected.id, your_name, $('#m').val());
        }
        $('#m').val('');
        return false;
        });

    socket.on('get chat message', function(name,msg){
      $('#messages').append($('<li>').text(name + ": " + msg));
      var bottom = document.getElementById("messages").scrollHeight;
      $('#messages').scrollTop(bottom);
    });

    socket.on('whisper', function(id,name,msg){
      console.log(msg);
      $('#messages').append($('<li>').text(name +"(whisper): " + msg));
    })

    socket.on('new user', function(id,list){
      for (var i = 0; i < list.length; i++) {
        if(list[i].id == id ){
          $('#currUsers').append($('<li>').text(list[i].name).attr("id", id));
          var chatUsers = document.getElementById("chatUsers");
          var option = document.createElement("option");
          option.text = list[i].name;
          option.id = list[i].id;
          chatUsers.add(option);
          if (logged == false) {
            logged = true;
            sessionID = id;
          }
          break;
        }
      }
      for (var i = 0; i < list.length; i++) {
        if(list[i].id != id &&list[i].id != sessionID){
          $('#currUsers').append($('<li>').text(list[i].name).attr("id", list[i].id));
          var chatUsers = document.getElementById("chatUsers");
          var option = document.createElement("option");
          option.text = list[i].name;
          option.id = list[i].id;
          chatUsers.add(option);
          break;
        }
      }

    })

    socket.on('user disconnected', function(id,list) {
      var ul = document.getElementById("currUsers");
      for (var i = 0; i < ul.children.length; i++){
        if(ul.children[i].id == id){
          console.log("i and node " + i+ ul.children[i]);
          ul.removeChild(ul.children[i]);
          break;
        }
      }

      var chatUsers = document.getElementById("chatUsers");
      for (var i = 1; i < chatUsers.length; i++) {
        if(chatUsers.options[i].id == id){
          chatUsers.options[i].remove();
          break;
        }
      }
    });


    ///////BOTTOM////////
  });
  </script>

  <script>
    $(document).ready(function(){
      $("#clickme").click(function(){
        $("#test").hide();
      });
    });
    function hide(){
      $("#clickme").hide();
    }
  </script>

  <script type="text/javascript">

    // Change the templates
    function ChangeTemplate(num){
      var oldlink = document.getElementsByTagName("link").item(0);
      var newlink = document.createElement("link");
      newlink.setAttribute("rel", "stylesheet");
        newlink.setAttribute("type", "text/css");
      switch(num){
        case 1:
          newlink.setAttribute("href", "/stylesheets/template1.css");
          break;
        case 2:
          newlink.setAttribute("href", "/stylesheets/template2.css");
          break;
        case 3:
          newlink.setAttribute("href", "/stylesheets/template3.css");
          break;
        case 4:
          newlink.setAttribute("href", "");
          break;
      }
      document.getElementsByTagName("head").item(0).replaceChild(newlink, oldlink);
    }
  </script>

  <!--------------------------------------          ------------------------------------>
  <!--------------------------------------   BODY   ------------------------------------>
  <!--------------------------------------          ------------------------------------>

  <body onload="checkReset()">
    <div class="bg">
        <!-- <button id="clickme" onclick="hide()">Click me to hide</button> -->
        <!-- <div class="greet">
          <h1> Greetings! &nbsp; <span class="username"><%= username %></span> </h1>
        </div> -->
        <!-- <div class="template" style="font-size: 30px; font-family:"Lucida Console", Courier, monospace;">Template</div> -->

        <!-- <div id="test">Testing </div> -->
        <div><p id="USERS"></p></div>

        <div class="chatting" >
          <ul id="messages" class="CHATBOX" ></ul>
          <select id="chatUsers" class="selectUser"><option></option></select>
          <form id="socketChat" action="">
            <input id="m" autocomplete="off" class="inputBox" /><button class="sendButton">Send</button>
          </form>
        </div>

        <ul id="currUsers" style="font-size: 30px; font-family:"Lucida Console", Courier, monospace;">Current Users</ul>

        <div class="template-field">
          <label style="font-size: 20px;">Web Background Template:</label><br>
          <button id="template1" class="template-button" onclick="ChangeTemplate(1)">Yellow</button>
          <button id="template2" class="template-button" onclick="ChangeTemplate(2)">Purple</button>
          <button id="template3" class="template-button" onclick="ChangeTemplate(3)">Forest</button>
          <button id="template3" class="template-button" onclick="ChangeTemplate(4)">Default</button><br>
        </div>
      <div class="grid-container">
        <div class="header">
          <h1>BANANA's Dailies Lists</h1>
          <div class="header-form">
            <form class="del-user-form" action="/del_user" method="post" del-user-form>
              <button type="submit">Delete Account</button>
            </form>

            <form class="logout-form" action="/logout?_method=DELETE" method="post" logout-form>
              <button type="submit">Log Out</button>
            </form>
          </div>
        </div>

        <div class="lists">
          <h1 class="list-title">My lists</h1>

          <ul class="list-container" data-lists></ul>

          <form class="list-form" new-list-form>
            <input type="text" name="name" placeholder="new list name">
            <button>+</button>
          </form>
        </div>

        <div class="display-list" list-display-container>
          <div class="display-list-header">
            <h1 class="display-list-title" list-title></h1>
            <p class="display-list-count" list-count></p>
          </div>

          <div class="display-list-body">
            <div class="task-container" data-tasks></div>

            <form class="task-form" action="/add_task" method="post" new-task-form>
              <input type="text" name="name" class="new task" placeholder="new task name">
              <button>+</button>

              <div class="reset-form">
                <table>
                  <p>automaticaly reset</p>
                  <tr>
                    <td><input type="checkbox" name="sunday" value="0" id="sunday"><label for="sunday">Sun</label></td>
                    <td><input type="checkbox" name="monday" value="1" id="monday"><label for="monday">Mon</label></td>
                    <td><input type="checkbox" name="tuesday" value="2" id="tuesday"><label for="tuesday">Tue</label></td>
                    <td><input type="checkbox" name="wednesday" value="3" id="wednesday"><label for="wednesday">Wed</label></td>
                    <td><input type="checkbox" name="thursday" value="4" id="thursday"><label for="thursday" >Thr</label></td>
                    <td><input type="checkbox" name="friday" value="5" id="friday"><label for="friday">Fri</label></td>
                    <td><input type="checkbox" name="saturday" value="6" id="saturday"><label for="saturday">Sat</label></td>
                    <td><label for="time">Time:</label><br>
                      <input type="time" name="time" style="padding-left: 10px;"></td>
                  </tr>
                </table>
              </div>
            </form>

            <form class="del-list-form" action="/del_list" method="post" del-list-form>
              <button class="btn delete" style="font-size: 20px">Delete list</button>
            </form>
          </div>
        </div>
      </div>
<!--  -->
      <template id="list-template">
        <li class="list-name"></li>
      </template>

      <template id="task-template">
        <div class="task-row">
          <div class="task-name">
            <input type="checkbox">
            <label></label>
            <p></p>
          </div>
          <button type="button" name="button">x</button>
        </div>
      </template>

      <div class="texteditor" >
        <form name="compForm" method="post" action="sample.php" onsubmit="if(validateMode()){this.myDoc.value=oDoc.innerHTML;return true;}return false;">
        <input type="hidden" name="myDoc">
        <textarea id="textBox" contenteditable="true" ></textarea>
        <p>
          <button type="button" id="savebutton">Save as file</button>
          <button type="button" id="clearbutton">Clear</button>
        </p>

        </form>
      </div>


      <!--              Bottom            -->
    </div>
  </body>

  <script type="text/javascript">
    let USERS = <%- USERS %>;
    function displayUsers()
    {
        document.getElementById("textBox").innerHTML = "Text";
        // for (var i = 0; i < USERS.users.length; i++) {
        //   console.log(USERS.users[i].name);}
    }
    var user_arr = [];
    var user_list = "";
    for (var i = 0; i < USERS.users.length; i++) {
      user_list += USERS.users[i].name;
      user_arr.push(USERS.users[i].name, " ");
    }
    // document.getElementById("USERS").innerHTML = user_list;
  </script>
  <script>
    const logoutForm = document.querySelector('[logout-form]')

    const listContainer = document.querySelector('[data-lists]')
    const newListForm = document.querySelector('[new-list-form]')
    const delListForm = document.querySelector('[del-list-form]')
    const listTemplate = document.getElementById('list-template')

    const listDisplayContainer = document.querySelector('[list-display-container]')
    const listTitleElement = document.querySelector('[list-title]')
    const listCountElement = document.querySelector('[list-count]')
    const taskContainer = document.querySelector('[data-tasks]')
    const newTaskForm = document.querySelector('[new-task-form]')
    const taskTemplate = document.getElementById('task-template')

    const LOCAL_STORAGE_SELECTED_LIST_ID_KEY = 'task.selectedListId'

    let list = <%- list %>
    let selectedListId = localStorage.getItem(LOCAL_STORAGE_SELECTED_LIST_ID_KEY)
    var timeoutCallback

    function checkReset() {
      var today = new Date()
      var day = today.getDay()
      var hour = ("0" + today.getHours()).slice(-2)
      var minute = ("0" + today.getMinutes()).slice(-2)
      var second = ("0" + today.getSeconds()).slice(-2)
      list.forEach(list => {
        list.tasks.forEach(task => {
          if (task.complete) {
            if (task.day.includes(day)) {
              if (task.time + ':00' == hour + ':' + minute + ':' + second) {
                task.complete = false
                render()
              }
            }
          }
        })
      })
      setTimeout(checkReset, 1000)
    }

    logoutForm.addEventListener('submit', evt => {
      evt.preventDefault()
      selectedListId = null
      saveSelectedListId()
      logoutForm.submit()
    })

    listContainer.addEventListener('click', evt => {
      if (evt.target.tagName == 'LI') {
        selectedListId = evt.target.id
        saveSelectedListId()
        render()
      }
    })

    newListForm.addEventListener('submit', evt => {
      evt.preventDefault()
      const newList = newListForm.name.value
      if (newList == '') return
      const postObject = {id: Date.now().toString(), name: newList, tasks: []}
      newListForm.name.value = ''
      list.push(postObject)
      const options = {
        method: 'POST',
        headers: {
          "Content-Type": "application/json"
        },
        body: JSON.stringify(postObject)
      }
      fetch('/add_list', options)
      render()
    })

    delListForm.addEventListener('submit', evt => {
      evt.preventDefault()
      list = list.filter(list => list.id != selectedListId)
      const postObject = {id: selectedListId}
      selectedListId = null
      saveSelectedListId()
      const options = {
        method: 'POST',
        headers: {
          "Content-Type": "application/json"
        },
        body: JSON.stringify(postObject)
      }
      fetch('/del_list', options)
      render()
    })

    taskContainer.addEventListener('click', evt => {
      if (evt.target.tagName == 'INPUT') {
        const selectedList = list.find(list => list.id == selectedListId)
        const selectedTask = selectedList.tasks.find(task => task.id == evt.target.id)
        selectedTask.complete = evt.target.checked
        const postObject = {complete:evt.target.checked, task_id: selectedTask.id, list_id: selectedListId}
        const options = {
          method: 'POST',
          headers: {
            "Content-Type": "application/json"
          },
          body: JSON.stringify(postObject)
        }
        fetch('/update_complete', options)
        render()
      } else if (evt.target.tagName == 'BUTTON') {
        const selectedList = list.find(list => list.id == selectedListId)
        const selectedTask = selectedList.tasks.find(task => task.id == evt.target.parentElement.firstElementChild.firstElementChild.id)
        selectedList.tasks = selectedList.tasks.filter(tasks => tasks.id != selectedTask.id)
        const postObject = {task_id: selectedTask.id, list_id: selectedListId}
        const options = {
          method: 'POST',
          headers: {
            "Content-Type": "application/json"
          },
          body: JSON.stringify(postObject)
        }
        fetch('/del_task', options)
        render()
      }
    })

    newTaskForm.addEventListener('submit', evt => {
      evt.preventDefault()
      const newTask = newTaskForm.name.value
      if (newTask == '') return
      let selectedDay = []
      const day = [newTaskForm.sunday.checked,newTaskForm.monday.checked,newTaskForm.tuesday.checked,newTaskForm.wednesday.checked,newTaskForm.thursday.checked,newTaskForm.friday.checked,newTaskForm.saturday.checked]
      for (var i = 0; i < day.length; i++) {
        if (day[i]) {
          selectedDay.push(i)
        }
      }
      let postObject = {id: Date.now().toString(), name: newTask, complete: false, day: selectedDay, time: newTaskForm.time.value}
      newTaskForm.name.value = ''
      newTaskForm.time.value = ''
      newTaskForm.sunday.checked = false
      newTaskForm.monday.checked = false
      newTaskForm.tuesday.checked = false
      newTaskForm.wednesday.checked = false
      newTaskForm.thursday.checked = false
      newTaskForm.friday.checked = false
      newTaskForm.saturday.checked = false
      const selectedList = list.find(list => list.id == selectedListId)
      selectedList.tasks.push(postObject)
      postObject.listId = selectedListId
      const options = {
        method: 'POST',
        headers: {
          "Content-Type": "application/json"
        },
        body: JSON.stringify(postObject)
      }
      fetch('/add_task', options)
      render()
    })

    function saveSelectedListId() {
      localStorage.setItem(LOCAL_STORAGE_SELECTED_LIST_ID_KEY, selectedListId)
    }

    function render() {
      clearElement(listContainer)
      clearTimeout(timeoutCallback)
      renderLists()
      if (selectedListId == null || selectedListId == 'null') {
        listDisplayContainer.style.display = 'none'
      } else {
        clearElement(taskContainer)
        const selectedList = list.find(list => list.id == selectedListId)
        const selectedTasks = selectedList.tasks
        listTitleElement.innerText = selectedList.name
        renderTaskCount(selectedTasks)
        renderTasks(selectedTasks)
        renderTaskCountdown(selectedTasks)
        listDisplayContainer.style.display = ''
      }
    }

    function renderLists() {
      list.forEach(list => {
        const listElement = document.importNode(listTemplate.content, true)
        const li = listElement.querySelector('li')
        li.id = list.id
        li.innerText = list.name
        if (list.id == selectedListId) {
          li.classList.add('selected-list')
        }
        if (list.tasks != '' && list.tasks.filter(task => !task.complete).length == 0) {
          li.classList.add('completed-list')
        }
        listContainer.appendChild(listElement)
      })
    }

    function renderTasks(selectedTasks) {
      selectedTasks.forEach(task => {
        const taskElement = document.importNode(taskTemplate.content, true)
        const checkbox = taskElement.querySelector('input')
        checkbox.id = task.id
        checkbox.checked = task.complete
        const label = taskElement.querySelector('label')
        label.htmlFor = task.id
        label.innerText = task.name
        const paragraph = taskElement.querySelector('p')
        paragraph.id = task.id + '_paragraph'
        taskContainer.appendChild(taskElement)
      })
    }

    function renderTaskCount(selectedTasks) {
      const incompleteTaskCount = selectedTasks.filter(task => !task.complete).length
      let incompleteTaskString
      if (incompleteTaskCount == 1) {
        incompleteTaskString = `${incompleteTaskCount} task remaining`
      } else {
        incompleteTaskString = `${incompleteTaskCount} tasks remaining`
      }
      listCountElement.innerText = incompleteTaskString
    }

    function renderTaskCountdown(selectedTasks) {
      var today = new Date()
      var day = today.getDay()
      var hour = ("0" + today.getHours()).slice(-2)
      var minute = ("0" + today.getMinutes()).slice(-2)
      var second = ("0" + today.getSeconds()).slice(-2)
      if (selectedTasks != '') {
        selectedTasks.forEach(task => {
          if (task.day != '' && task.time != '') {
            var dayArr = task.day
            var timeArr = task.time.split(':')
            var countDownDates = []
            dayArr.forEach(day => {
              var nextReset = new Date()
              nextReset.setHours(timeArr[0], timeArr[1], 00, 00)
              nextReset.setDate(today.getDate() + (parseInt(day) + 7 - today.getDay()) % 7)
              if (nextReset.getTime() < today.getTime()) {
                nextReset.setDate(today.getDate() + (parseInt(day) + 7 - today.getDay()))
              }
              countDownDates.push(nextReset)
            })
            var distance = Math.min.apply(Math, countDownDates) - today
            var days = Math.floor(distance / (1000 * 60 * 60 * 24));
            var hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
            var minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));
            var seconds = Math.floor((distance % (1000 * 60)) / 1000);
            document.getElementById(`${task.id}_paragraph`).innerHTML = "resets in " + days + "d " + hours + "h " + minutes + "m " + seconds + "s "
          }
        })
      }
      timeoutCallback = setTimeout(renderTaskCountdown, 1000, selectedTasks)
    }

    function clearElement(element) {
      while (element.firstChild) {
        element.removeChild(element.firstChild)
      }
    }

    render()
  </script>

  <script type="text/javascript" src="/stylesheets/script.js"></script>
</html>
