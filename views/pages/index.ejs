<!DOCTYPE html>
<html lang="en" dir="ltr">
  <head>
    <meta charset="utf-8">
    <title></title>
    <style>
      .selected-list {
        font-weight: bold;
      }
      .task-name input:checked + label {
        text-decoration: line-through;
      }
    </style>
  </head>
  <script type="text/javascript">
  function Time()
  {
  var today=new Date()
  var h=today.getHours()
  var m=today.getMinutes()
  var s=today.getSeconds()
  if(document.getElementById('hour').value==h && document.getElementById('min').value==m )
  {
    if(document.getElementById('sec').value==s)
      window.alert("Timeing!!!");
  }

  document.getElementById('txt').innerHTML=h+":"+m+":"+s
  t=setTimeout('Time()',500)

  }
  </script>
  <body onload="Time()">
    <form class="logout-form" action="/logout?_method=DELETE" method="POST" logout-form>
      <button type="submit">Log Out</button>
    </form>
    Current time is:<div id="txt"></div>
    Alram clock at:<div class="">
      <input type="text" id="hour" value="" placeholder="hour">
      <input type="text" id="min" value="" placeholder="min">
      <input type="text" id="sec" value="" placeholder="sec">
    </div>
    <div class="all-lists">
      <h2 class="task-list-title">My lists</h2>

      <ul class="lists" data-lists></ul>

      <form class="new-list-form" action="/add_list" method="post" new-list-form>
        <input type="text" name="list" class="new list" placeholder="new list name">
        <button type="" class="btn create">+</button>
      </form>
    </div>

    <div class="display-list" list-display-container>
      <div class="header">
        <h2 class="list-title" list-title></h2>
        <p class="task-count" list-count></p>
      </div>

      <div class="body">
        <div class="tasks" data-tasks></div>

        <form class="new-task-form" action="/add_task" method="post" new-task-form>
          <input type="text" name="id" hidden>
          <input type="text" name="task" class="new task" placeholder="new task name">
          <button class="btn create">+</button>
        </form>

        <form class="del-list-form" action="/del_list" method="post" del-list-form>
          <input type="text" name="id" hidden>
          <button class="btn delete">Delete list</button>
        </form>
      </div>
    </div>

    <form class="" action="" method="post" update-list-from hidden>
      <input type="text" name="list_id">
      <input type="text" name="task_id">
      <input type="text" name="complete">
    </form>

    <template id="list-template">
      <li class="list-name"></li>
    </template>

    <template id="task-template">
      <div class="task-name">
        <input type="checkbox">
        <label></label>
        <button type="button" name="button">X</button>
      </div>
    </template>
  </body>
  <script>
    const logoutForm = document.querySelector('[logout-form]')
    const updateListForm = document.querySelector('[update-list-from]')

    const listContainer = document.querySelector('[data-lists]')
    const newListForm = document.querySelector('[new-list-form]')
    const delListForm = document.querySelector('[del-list-form]')
    const listTemplate = document.getElementById('list-template')

    const listDisplayContainer = document.querySelector('[list-display-container]')
    const listTitleElement = document.querySelector('[list-title]')
    const listCountElement = document.querySelector('[list-count]')
    const taskContainer = document.querySelector('[data-tasks]')
    const newTaskForm = document.querySelector('[new-task-form]')
    const taskTemplate = document.getElementById('task-template')

    const LOCAL_STORAGE_SELECTED_LIST_ID_KEY = 'task.selectedListId'

    let list = <%- list %>
    let selectedListId = localStorage.getItem(LOCAL_STORAGE_SELECTED_LIST_ID_KEY)

    listContainer.addEventListener('click', evt => {
      if (evt.target.tagName == 'LI') {
        selectedListId = evt.target.id
        saveSelectedListId()
        clearElement(taskContainer)
        render()
      }
    })

    taskContainer.addEventListener('click', evt => {
      if (evt.target.tagName == 'INPUT') {
        let selectedList = list.find(list => list.id == selectedListId)
        selectedTask = selectedList.tasks.find(task => task.id == evt.target.id)
        selectedTask.complete = evt.target.checked
        updateListForm.complete.value = selectedTask.complete
        updateListForm.task_id.value = selectedTask.id
        updateListForm.list_id.value = selectedListId
        updateListForm.action = '/save_complete'
        updateListForm.submit()
      } else if (evt.target.tagName == 'BUTTON') {
        let selectedList = list.find(list => list.id == selectedListId)
        selectedTask = selectedList.tasks.find(task => task.id == evt.target.parentElement.firstElementChild.id)
        updateListForm.task_id.value = selectedTask.id
        updateListForm.list_id.value = selectedListId
        updateListForm.action = '/del_task'
        updateListForm.submit()
      }
    })

    logoutForm.addEventListener('submit', evt => {
      evt.preventDefault()
      selectedListId = null
      saveSelectedListId()
      logoutForm.submit()
    })

    newListForm.addEventListener('submit', evt => {
      evt.preventDefault()
      const newList = newListForm.list.value
      if (newList == '') return
      newListForm.submit()
    })

    delListForm.addEventListener('submit', evt => {
      evt.preventDefault()
      const delList = selectedListId
      if (delList == null || delList == 'null') return
      delListForm.id.value = delList
      selectedListId = null
      saveSelectedListId()
      delListForm.submit()
    })

    newTaskForm.addEventListener('submit', evt => {
      evt.preventDefault()
      const newTask = newTaskForm.task.value
      if (newTask == '') return
      newTaskForm.task.value = newTask
      newTaskForm.id.value = selectedListId
      newTaskForm.submit()
    })

    function saveSelectedListId() {
      localStorage.setItem(LOCAL_STORAGE_SELECTED_LIST_ID_KEY, selectedListId)
    }

    function render() {
      clearElement(listContainer)
      renderLists()
      if (selectedListId == null || selectedListId == 'null') {
        listDisplayContainer.style.display = 'none'
      } else {
        let selectedList = list.find(list => list.id == selectedListId)
        selectedTasks = selectedList.tasks
        renderTaskCount(selectedTasks)
        renderTasks(selectedTasks)
        listDisplayContainer.style.display = ''
        listTitleElement.innerText = list.find(list => list.id == selectedListId).name
      }
    }

    function renderTasks(selectedTasks) {
      selectedTasks.forEach(task => {
        const taskElement = document.importNode(taskTemplate.content, true)
        const checkbox = taskElement.querySelector('input')
        checkbox.id = task.id
        checkbox.checked = task.complete
        const label = taskElement.querySelector('label')
        label.htmlFor = task.id
        label.innerText = task.name
        taskContainer.appendChild(taskElement)
      })
    }

    function renderTaskCount(selectedTasks) {
      const incompleteTaskCount = selectedTasks.filter(task => !task.complete).length
      if (incompleteTaskCount == 1) {
        var incompleteTaskString = `${incompleteTaskCount} task remaining`
      } else {
        var incompleteTaskString = `${incompleteTaskCount} tasks remaining`
      }
      listCountElement.innerText = incompleteTaskString
    }

    function renderLists() {
      list.forEach(list => {
        const listElement = document.importNode(listTemplate.content, true)
        const li = listElement.querySelector('li')
        li.id = list.id
        li.innerText = list.name
        if (list.id == selectedListId) {
          li.classList.add('selected-list')
        }
        listContainer.appendChild(listElement)
      })
    }

    function clearElement(element) {
      while (element.firstChild) {
        element.removeChild(element.firstChild)
      }
    }

    render()
  </script>
</html>
